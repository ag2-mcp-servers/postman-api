# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:38:22+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path, Query

from models import (
    ApisApiIdDeleteResponse,
    ApisApiIdGetResponse,
    ApisApiIdPutRequest,
    ApisApiIdPutResponse,
    ApisApiIdVersionsApiVersionIdContracttestGetResponse,
    ApisApiIdVersionsApiVersionIdDeleteResponse,
    ApisApiIdVersionsApiVersionIdDocumentationGetResponse,
    ApisApiIdVersionsApiVersionIdEntityTypeEntityIdSyncWithSchemaPutResponse,
    ApisApiIdVersionsApiVersionIdEntityTypeEntityIdSyncWithSchemaPutResponse1,
    ApisApiIdVersionsApiVersionIdEnvironmentGetResponse,
    ApisApiIdVersionsApiVersionIdGetResponse,
    ApisApiIdVersionsApiVersionIdIntegrationtestGetResponse,
    ApisApiIdVersionsApiVersionIdMonitorGetResponse,
    ApisApiIdVersionsApiVersionIdPutRequest,
    ApisApiIdVersionsApiVersionIdPutResponse,
    ApisApiIdVersionsApiVersionIdRelationsGetResponse,
    ApisApiIdVersionsApiVersionIdRelationsPostRequest,
    ApisApiIdVersionsApiVersionIdRelationsPostResponse,
    ApisApiIdVersionsApiVersionIdSchemasPostRequest,
    ApisApiIdVersionsApiVersionIdSchemasPostResponse,
    ApisApiIdVersionsApiVersionIdSchemasSchemaIdCollectionsPostRequest,
    ApisApiIdVersionsApiVersionIdSchemasSchemaIdCollectionsPostResponse,
    ApisApiIdVersionsApiVersionIdSchemasSchemaIdGetResponse,
    ApisApiIdVersionsApiVersionIdSchemasSchemaIdPutRequest,
    ApisApiIdVersionsApiVersionIdSchemasSchemaIdPutResponse,
    ApisApiIdVersionsApiVersionIdTestsuiteGetResponse,
    ApisApiIdVersionsGetResponse,
    ApisApiIdVersionsPostRequest,
    ApisApiIdVersionsPostResponse,
    ApisPostRequest,
    ApisPostResponse,
    CollectionsCollectionUidDeleteResponse,
    CollectionsCollectionUidDeleteResponse1,
    CollectionsCollectionUidGetResponse,
    CollectionsCollectionUidPutRequest,
    CollectionsCollectionUidPutResponse,
    CollectionsCollectionUidPutResponse1,
    CollectionsCollectionUidPutResponse2,
    CollectionsCollectionUidPutResponse3,
    CollectionsForkCollectionUidPostRequest,
    CollectionsGetResponse,
    CollectionsMergePostRequest,
    CollectionsPostRequest,
    CollectionsPostResponse,
    CollectionsPostResponse1,
    EnvironmentsEnvironmentUidDeleteResponse,
    EnvironmentsEnvironmentUidDeleteResponse1,
    EnvironmentsEnvironmentUidGetResponse,
    EnvironmentsEnvironmentUidPutRequest,
    EnvironmentsEnvironmentUidPutResponse,
    EnvironmentsEnvironmentUidPutResponse1,
    EnvironmentsGetResponse,
    EnvironmentsPostRequest,
    EnvironmentsPostResponse,
    EnvironmentsPostResponse1,
    ImportExportedPostResponse,
    ImportExportedPostResponse1,
    ImportOpenapiPostRequest,
    ImportOpenapiPostResponse,
    ImportOpenapiPostResponse1,
    MeGetResponse,
    MocksGetResponse,
    MocksMockUidDeleteResponse,
    MocksMockUidGetResponse,
    MocksMockUidPublishPostResponse,
    MocksMockUidPutRequest,
    MocksMockUidPutResponse,
    MocksMockUidUnpublishDeleteResponse,
    MocksPostRequest,
    MocksPostResponse,
    MonitorsGetResponse,
    MonitorsMonitorUidDeleteResponse,
    MonitorsMonitorUidDeleteResponse1,
    MonitorsMonitorUidGetResponse,
    MonitorsMonitorUidGetResponse1,
    MonitorsMonitorUidPutRequest,
    MonitorsMonitorUidPutResponse,
    MonitorsMonitorUidRunPostResponse,
    MonitorsPostRequest,
    MonitorsPostResponse,
    MonitorsPostResponse1,
    WebhooksPostRequest,
    WorkspacesGetResponse,
    WorkspacesPostRequest,
    WorkspacesPostResponse,
    WorkspacesPostResponse1,
    WorkspacesWorkspaceIdDeleteResponse,
    WorkspacesWorkspaceIdGetResponse,
    WorkspacesWorkspaceIdGetResponse1,
    WorkspacesWorkspaceIdPutRequest,
    WorkspacesWorkspaceIdPutResponse,
    WorkspacesWorkspaceIdPutResponse1,
    WorkspacesWorkspaceIdPutResponse2,
)

app = MCPProxy(
    contact={},
    description='The Postman API allows you to programmatically access data stored in Postman account with ease.\n\nThe easiest way to get started with the API is to click the **fork** button to fork this collection to your own workspace and use Postman to send requests.\n\n\n# Overview\n\n1. You need a valid <a href="#authentication">API Key</a> to send requests to the API endpoints. You can get your key from the [integrations dashboard](https://go.postman.co/settings/me/api-keys).\n\n1. The API has an access <a href="#rate-limits">rate limit</a> applied to it.\n\n1. The Postman API will only respond to secured communication done over HTTPS. HTTP requests will be sent a `301` redirect to corresponding HTTPS resources.\n\n1. Response to every request is sent in [JSON format](https://en.wikipedia.org/wiki/JSON). In case the API request results in an error, it is represented by an `"error": {}` key in the JSON response.\n\n1. The request method (verb) determines the nature of action you intend to perform. A request made using the `GET` method implies that you want to fetch something from Postman, and `POST` implies you want to save something new to Postman.\n\n1. The API calls will respond with appropriate [HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for all requests. Within Postman Client, when a response is received, the status code is highlighted and is accompanied by a help text that indicates the possible meaning of the response code. A `200 OK` indicates all went well, while `4XX` or `5XX` response codes indicate an error from the requesting client or our API servers respectively.\n\n1. Individual resources in your Postman Account is accessible using its unique id (`uid`). The `uid` is a simple concatenation of the resource owner\'s user-id and the resource-id. For example, a collection\'s `uid` is `{{owner_id}}-{{collection_id}}`.\n\n# Authentication\n\nAn API Key is required to be sent as part of every request to the Postman API, in the form of an `X-Api-Key` request header.\n\n> If you do not have an API Key, you can easily generate one by heading over to the [Postman Integrations Dashboard](https://go.postman.co/integrations/services/pm_pro_api).\n\nAn API Key tells our API server that the request it received came from you. Everything that you have access to in Postman is accessible with an API Key that is generated by you.\n\nFor ease of use inside Postman, you could store your API key in an [environment variable](https://www.getpostman.com/docs/environments) called `postman_api_key` and this [Collection](https://www.getpostman.com/docs/collections) will automatically use it to make API calls.\n\n## API Key related error response\n\nIf an API Key is missing, malformed, or invalid, you will receive a `401 Unauthorised` response code and the following JSON response:\n\n```\n{\n  "error": { \n    "name": "AuthenticationError",\n    "message": "API Key missing. Every request requires an API Key to be sent."\n  }\n}\n```\n\n## Using the API Key as a query parameter\n\nEvery request that accepts API Key as `X-Api-Key` request header, also accepts the key when sent as `apikey` URL query parameter.\n\nAPI key sent as part of the header has a higher priority in case you send the key using both request header and query parameter.\n\n\n# Rate Limits\n\nAPI access rate limits are applied at a per-key basis in unit time. Access to the API using a key is limited to **60 requests per minute**. In addition, every API response is accompanied by the following set of headers to identify the status of your consumption.\n\n\n| Header                  | Description |\n|-------------------------|-------------|\n| `X-RateLimit-Limit`     | The maximum number of requests that the consumer is permitted to make per minute. |\n| `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. |\n| `X-RateLimit-Reset`     | The time at which the current rate limit window resets in UTC epoch seconds. |\n\n\nOnce you hit the rate limit, you will receive a response similar to the following JSON, with a status code of `429 Too Many Requests`.\n\n```json\n{\n  "error": {\n    "name": "rateLimitError",\n    "message": "Rate Limit exceeded. Please retry at 1465452702843"\n  }\n}\n```\n\n\n# Support\n\nFor help regarding accessing the Postman API, feel free to discuss it in our [Discourse Community](https://community.getpostman.com). You can also drop in a line at [help@getpostman.com](mailto:help@getpostman.com).\n\nIn the event you receive a `503` response from our servers, it implies that we have hit an unexpected spike in API access traffic and would usually be operational within the next 5 minutes. If the outage persists, or your receive any other form of `5XX` error, kindly let us know.\n\n\n# Terms of Use\n\nFor information on API terms of use and privacy, refer to our terms at [http://postman.com/legal/terms/](http://postman.com/legal/terms/) and our privacy policy at [https://www.postman.com/legal/privacy-policy/](https://www.postman.com/legal/privacy-policy/).\n\n\n# API Reference',
    title='Postman API',
    version='1.20.0',
    servers=[{'url': 'https://api.getpostman.com'}],
)


@app.get(
    '/apis',
    description=""" This call fetches all the APIs present in the specified workspace

Response contains an array named `apis` which would contain all the details of APIs present in the workspace.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_management', 'workspace_operations'],
)
def get_all_ap_is(
    workspace: Optional[str] = None,
    since: Optional[str] = None,
    until: Optional[str] = None,
    created_by: Optional[str] = Query(None, alias='createdBy'),
    updated_by: Optional[str] = Query(None, alias='updatedBy'),
    is_public: Optional[str] = Query(None, alias='isPublic'),
    name: Optional[str] = None,
    summary: Optional[str] = None,
    description: Optional[str] = None,
    sort: Optional[str] = None,
    direction: Optional[str] = None,
):
    """
    Get all APIs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/apis',
    description=""" This call creates a new API with a default API Version.  

Request body should contain an `api` object which should atleast have a property `name`.

Response contains an `api` object with all the details related to the created API, namely, `id`, `name`, `summary`, `description`, etc. 

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_management', 'workspace_operations'],
)
def create_api(workspace: Optional[str] = None, body: ApisPostRequest = None):
    """
    Create API
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/apis/{apiId}',
    description=""" This call deletes an existing API having the specified id.  

Response contains an `api` object with `id` of the API which was deleted.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_management'],
)
def delete_an_api(api_id: str = Path(..., alias='apiId')):
    """
    Delete an API
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apis/{apiId}',
    description=""" This call fetches a single API having the specified id.

Response contains an `api` object with all the details related to the queried API, namely, `id`, `name`, `summary`, `description` etc. 

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_management'],
)
def single_api(api_id: str = Path(..., alias='apiId')):
    """
    Single API
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/apis/{apiId}',
    description=""" This call updates an existing API .  

Request body should contain an `api` object which should have the fields to be updated. Only `name`, `summary` and `description` fields can be edited for an API.

Response contains an `api` object with all the details related to the created API, namely, `id`, `name`, `summary`, `description` etc. 

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_management', 'api_relationships'],
)
def update_an_api(
    api_id: str = Path(..., alias='apiId'), body: ApisApiIdPutRequest = None
):
    """
    Update an API
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apis/{apiId}/versions',
    description=""" This call fetches details about the all the API Versions in the specified API.

The response will contain an array `versions` object which would be a list of all the API Version along with their details.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_management', 'api_relationships'],
)
def get_all_api_versions(api_id: str = Path(..., alias='apiId')):
    """
    Get All API Versions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/apis/{apiId}/versions',
    description=""" This call creates a new API version in the specified API.  

Request body should contain a `version` object which should have fields:

<table>
<tr>
	<td>name</td>
	<td>Required. Name of the API Version</td>
</tr>
<tr>
	<td>source</td>
	<td>
		If specified, it will copy the contents of the specified api version to create a new api verison.
		<table>
			<tr>
				<td>id</td>
				<td>Required. Id of the apiversion from where the details are to be copied</td>
			</tr>
			<tr>
				<td>schema</td>
				<td>Boolean. If true then copies the schema from the specified api version</td>
			</tr>
			<tr>
				<td>relations</td>
				<td>Object. {"&lt;relationType&gt;": true/false}.  
					Allowed relation types are `mock`, `monitor`, `documentation`, `contracttest`, `integrationtest`, `testsuite`, `environment`
				Relation types which should be copied over to the new api verison</td>
			</tr>
		</table>
	</td>
</tr>
</table>

Response contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api`.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_management', 'api_relationships'],
)
def create_api_version(
    api_id: str = Path(..., alias='apiId'), body: ApisApiIdVersionsPostRequest = None
):
    """
    Create API Version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/apis/{apiId}/versions/{apiVersionId}',
    description=""" This call deletes an existing API Version having the specified id.  

Response contains an `version` object with `id` of the API Version which was deleted.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_management', 'api_relationships'],
)
def delete_an_api_version(
    api_id: str = Path(..., alias='apiId'),
    api_version_id: str = Path(..., alias='apiVersionId'),
):
    """
    Delete an API Version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apis/{apiId}/versions/{apiVersionId}',
    description=""" This call fetches details about the specified API Version.

The response will contain a `version` object which would contain all the details of the API Version.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_management', 'api_relationships'],
)
def get_an_api_version(
    api_id: str = Path(..., alias='apiId'),
    api_version_id: str = Path(..., alias='apiVersionId'),
):
    """
    Get an API Version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/apis/{apiId}/versions/{apiVersionId}',
    description=""" This call updates an existing API Version.  

Request body should contain a `version` object with the fields which need to be updated. Only field which can be updated is `name`.

Response contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api` etc.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_management', 'api_relationships'],
)
def update_an_api_version(
    api_id: str = Path(..., alias='apiId'),
    api_version_id: str = Path(..., alias='apiVersionId'),
    body: ApisApiIdVersionsApiVersionIdPutRequest = None,
):
    """
    Update an API Version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apis/{apiId}/versions/{apiVersionId}/contracttest',
    description=""" This call fetches all the relations by type which are linked to the specified API version along with their details.

The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_relationships'],
)
def get_contract_test_relations(
    api_id: str = Path(..., alias='apiId'),
    api_version_id: str = Path(..., alias='apiVersionId'),
):
    """
    Get contract test relations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apis/{apiId}/versions/{apiVersionId}/documentation',
    description=""" This call fetches all the relations by type which are linked to the specified API version along with their details.

The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_relationships'],
)
def get_documentation_relations(
    api_id: str = Path(..., alias='apiId'),
    api_version_id: str = Path(..., alias='apiVersionId'),
):
    """
    Get  documentation relations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apis/{apiId}/versions/{apiVersionId}/environment',
    description=""" This call fetches all the relations by type which are linked to the specified API version along with their details.

The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_relationships', 'environment_operations'],
)
def get_environment_relations(
    api_id: str = Path(..., alias='apiId'),
    api_version_id: str = Path(..., alias='apiVersionId'),
):
    """
    Get environment relations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apis/{apiId}/versions/{apiVersionId}/integrationtest',
    description=""" This call fetches all the relations by type which are linked to the specified API version along with their details.

The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_relationships'],
)
def get_integration_test_relations(
    api_id: str = Path(..., alias='apiId'),
    api_version_id: str = Path(..., alias='apiVersionId'),
):
    """
    Get integration test relations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apis/{apiId}/versions/{apiVersionId}/monitor',
    description=""" This call fetches all the relations by type which are linked to the specified API version along with their details.

The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_relationships', 'monitoring_operations'],
)
def get_monitor_relations(
    api_id: str = Path(..., alias='apiId'),
    api_version_id: str = Path(..., alias='apiVersionId'),
):
    """
    Get monitor relations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apis/{apiId}/versions/{apiVersionId}/relations',
    description=""" This call fetches all the relations which are linked to the specified API version along with their details.

The response will contain a `relations` object which lists all the relation types which are linked to the API version. Each of the relation type will be an object which details the relations of this type. 

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_relationships'],
)
def get_linked_relations(
    api_id: str = Path(..., alias='apiId'),
    api_version_id: str = Path(..., alias='apiVersionId'),
):
    """
    Get linked relations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/apis/{apiId}/versions/{apiVersionId}/relations',
    description=""" This call allows you to add existing Postman entities as new relations to an API. The request body should contain the relations to be created along with an array of entity IDs. 

<table>
  <tr>
    <th>Relation</th>
    <th>Entity ID type</th>
  <tr>
  <tr>
    <td>contracttest</td>
    <td>Collection UIDs</td>
  </tr>
  <tr>
    <td>integrationtest</td>
    <td>Collection UIDs</td>
  </tr>
  <tr>
    <td>documentation</td>
    <td>Collection UIDs</td>
  </tr>
  <tr>
    <td>testsuite</td>
    <td>Collection UIDs</td>
  </tr>
  <tr>
    <td>environment</td>
    <td>Environment UIDs</td>
  </tr>
  <tr>
    <td>mock</td>
    <td>Mock IDs</td>
  </tr>
  <tr>
    <td>monitor</td>
    <td>Monitor IDs</td>
  </tr>
</table>

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_management', 'api_relationships'],
)
def create_relations(
    api_id: str = Path(..., alias='apiId'),
    api_version_id: str = Path(..., alias='apiVersionId'),
    body: ApisApiIdVersionsApiVersionIdRelationsPostRequest = None,
):
    """
    Create relations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/apis/{apiId}/versions/{apiVersionId}/schemas',
    description=""" This call creates a new schema.

Request body should contain a `schema` object which should atleast have these properties with `string` values:

- **`type`**: Allowed types are `openapi3`, `openapi2`, `openapi1`, `raml` and `graphql`.
- **`language`** : Allowed languages are `json` and `yaml` for OpenAPI and RAML schema types. GraphQL schema type accepts only `graphql` language.
- **`schema`**: Optional. If passed, must be the content of the schema as a `string`.

Response contains a `schema` object with all the details related to the created schema, namely, `id`, `language`, `type` etc. 

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_management', 'schema_definition_management'],
)
def create_schema(
    api_id: str = Path(..., alias='apiId'),
    api_version_id: str = Path(..., alias='apiVersionId'),
    body: ApisApiIdVersionsApiVersionIdSchemasPostRequest = None,
):
    """
    Create Schema
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}',
    description=""" This call fetches a single schema having the specified id.

Response contains a `schema` object with all the details related to the schema, namely, `id`, `language`, `type`, `schema` etc. 

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['schema_definition_management', 'api_management'],
)
def get_schema(
    api_id: str = Path(..., alias='apiId'),
    api_version_id: str = Path(..., alias='apiVersionId'),
    schema_id: str = Path(..., alias='schemaId'),
):
    """
    Get Schema
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}',
    description=""" This call updates an existing schema.

Request body should contain a `schema` object which should atleast have these properties with `string` values:

- **`type`**: Allowed types are `openapi3`, `openapi2`, `openapi1`, `raml` and `graphql`.
- **`language`** : Allowed languages are `json` and `yaml` for OpenAPI and RAML schema types. GraphQL schema type accepts only `graphql` language.
- **`schema`**: Optional. If passed, must be the content of the schema as a `string`.

Response contains a `schema` object with all the details related to the created schema, namely, `id`, `language`, `type` etc. 

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_management', 'schema_definition_management'],
)
def update_schema(
    api_id: str = Path(..., alias='apiId'),
    api_version_id: str = Path(..., alias='apiVersionId'),
    schema_id: str = Path(..., alias='schemaId'),
    body: ApisApiIdVersionsApiVersionIdSchemasSchemaIdPutRequest = None,
):
    """
    Update Schema
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}/collections',
    description=""" This call creates a collection and links it to an API as one or multiple relations. 

Request body requires two keys:
- `name` - Name of the collection to be created.
- `relations` - A list of relation(s) to be created.

The allowed relation types are `contracttest`, `integrationtest`, `testsuite`, and `documentation`.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['schema_definition_management', 'collection_operations'],
)
def create_collection_from_schema(
    workspace: Optional[str] = None,
    api_id: str = Path(..., alias='apiId'),
    api_version_id: str = Path(..., alias='apiVersionId'),
    schema_id: str = Path(..., alias='schemaId'),
    body: ApisApiIdVersionsApiVersionIdSchemasSchemaIdCollectionsPostRequest = None,
):
    """
    Create collection from schema
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apis/{apiId}/versions/{apiVersionId}/testsuite',
    description=""" This call fetches all the relations by type which are linked to the specified API version along with their details.

The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_relationships'],
)
def get_test_suite_relations(
    api_id: str = Path(..., alias='apiId'),
    api_version_id: str = Path(..., alias='apiVersionId'),
):
    """
    Get test suite relations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/apis/{apiId}/versions/{apiVersionId}/{entityType}/{entityId}/syncWithSchema',
    description=""" This call allows you to keep the relation in sync with the API schema.


> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_relationships', 'schema_definition_management'],
)
def sync_relations_with_schema(
    api_id: str = Path(..., alias='apiId'),
    api_version_id: str = Path(..., alias='apiVersionId'),
    entity_type: str = Path(..., alias='entityType'),
    entity_id: str = Path(..., alias='entityId'),
):
    """
    Sync relations with schema
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/collections',
    description=""" The `/collections` endpoint returns a list of all [collections](https://www.getpostman.com/docs/collections) that are accessible by you. The list includes your own collections and the collections that you have subscribed to.

The response contains an array of collection information containing the `name`, `id`, `owner` and `uid` of each collection.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['collection_operations'],
)
def all_collections():
    """
    All Collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/collections',
    description=""" This endpoint allows you to create collections using the Postman Collection v2 format. For more information about the v2 schema, check the format [here](https://schema.getpostman.com/json/collection/v2.0.0/docs/index.html).

On successful creation of the collection, the response returns the collection `name`, `id` and the `uid`.

You can also specify the context of a workspace to create a collection in directly by passing the `workspace` as a query param.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['collection_operations'],
)
def create_collection(body: CollectionsPostRequest = None):
    """
    Create Collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/collections/fork/{collection_uid}',
    description=""" This endpoint allows you to create a fork from an existing collection.

On successful creation of the collection, the response returns the collection `name`, `id`, `uid` along with `fork` information.

You can also specify the context of a workspace to fork a collection in by passing the `workspace` as a query param.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['collection_operations', 'workspace_operations'],
)
def create_a_fork(
    workspace: Optional[str] = None,
    collection_uid: str = ...,
    body: CollectionsForkCollectionUidPostRequest = None,
):
    """
    Create a Fork
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/collections/merge',
    description=""" This endpoint allows you to merge a forked collection back to its destination collection.

On successful creation of the collection, the response returns the collection `name`, `id` and `uid`.

You need to specify the fork UID (as `source`) and destination collection UID (as `destination`) in the request body.

Optionally, you can also specify the merge strategy as either `deleteSource` or `updateSourceWithDestination`. Following is an explanation of the merge strategies

| Merge Strategy | Behaviour |
| --- | --- |
| deleteSource | Forked collection is deleted after merging |
| updateSourceWithDestination | Forked collection is up to date with changes in destination collection |

If the collections cannot be merged (due to conflicts), appropriate error messages will be returned.


> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['collection_operations', 'api_relationships'],
)
def merge_a_fork(body: CollectionsMergePostRequest = None):
    """
    Merge a Fork
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/collections/{collection_uid}',
    description=""" This endpoint allows you to delete an existing collection.

On successful deletion of the collection, the response returns the `id` and `uid`.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['collection_operations'],
)
def delete_collection(collection_uid: str):
    """
    Delete Collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/collections/{collection_uid}',
    description=""" Access the contents of a collection that is accessible to you using its unique id (`uid`).

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['collection_operations'],
)
def single_collection(collection_uid: str):
    """
    Single Collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/collections/{collection_uid}',
    description=""" This endpoint allows you to update an existing collection using the Postman Collection v2 format. For more information about the v2 schema, check the format [here](https://schema.getpostman.com/json/collection/v2.0.0/docs/index.html).

On successful updation of the collection, the response returns the collection `name`, `id` and `uid`.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.

Note: Please be careful when trying to update the collection, as the existing collection will be replaced by the request body. """,
    tags=['collection_operations', 'api_management'],
)
def update_collection(
    collection_uid: str, body: CollectionsCollectionUidPutRequest = None
):
    """
    Update Collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/environments',
    description=""" The `/environments` endpoint returns a list of all [environments](https://www.getpostman.com/docs/environments) that belong to you..

The response contains an array of environments' information containing the `name`, `id`, `owner` and `uid` of each environment.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['environment_operations'],
)
def all_environments():
    """
    All Environments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/environments',
    description=""" A sample body is added to the request that conforms to the following JSON schema:

```json
{
  "type": "object",
  "properties": {
    "environment": {
      "type": "object",
      "properties": {
        "name": {
              "type": "string",
              "maxLength": 254,
              "minLength": 1
            },
        "values": {
          "type": "array",
          "maxItems": 100,
          "additionalItems": false,
          "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "maxLength": 254
                  "minLength": 1
                },
                "value": { "type": "string" },
                "enabled": { "type": "boolean" }
              },
              "required": ["key", "value"]
            }
        }
      },
      "required": ["name"]
    }
  },
  "required": ["environment"]
}
```

On successful creation of the environment, the API returns the environment name and `id`.

You can also specify the context of a workspace to create an environment in directly by passing the `workspace` as a query param.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['environment_operations'],
)
def create_environment(body: EnvironmentsPostRequest = None):
    """
    Create Environment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/environments/{environment_uid}',
    description=""" This endpoint allows you to delete a single environment based on an environment's unique `uid`.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['environment_operations', 'api_relationships'],
)
def delete_environment(environment_uid: str):
    """
    Delete Environment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/environments/{environment_uid}',
    description=""" Access the contents of an environment that is accessible to you using its unique id (`uid`).

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['environment_operations'],
)
def single_environment(environment_uid: str):
    """
    Single Environment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/environments/{environment_uid}',
    description=""" This endpoint replaces an existing environment.

A sample body is added to the request that conforms to the following JSON schema:

```json
{
	"type": "object",
	"properties": {
		"environment": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"maxLength": 254,
					"minLength": 1
				},
				"values": {
					"type": "array",
					"maxItems": 100,
					"additionalItems": false,
					"items": {
						"type": "object",
						"properties": {
							"key": {
								"type": "string",
								"maxLength": 254,
								"minLength": 1
							},
							"value": {
								"type": "string",
								"maxLength": 254,
								"minLength": 1
							},
							"type": {
								"type": "string"
							},
							"enabled": {
								"type": "boolean"
							}
						},
						"required": [
							"key",
							"value"
						]
					}
				}
			}
		}
	},
	"required": [
		"environment"
	]
}
```

On successful updation of the environment, the API returns the environment name and `id`.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['environment_operations', 'api_management'],
)
def update_environment(
    environment_uid: str, body: EnvironmentsEnvironmentUidPutRequest = None
):
    """
    Update Environment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/import/exported',
    description=""" This endpoint allows you to import your exported Postman data.
For more information about how you can export your data, refer <a href="https://go.postman.co/me/export">Export your Postman data.</a>

On successful imports, the response will be an array with Each element contaning `id`, `name` and `uid` of entities created.

**Note**: Refer to examples for different scenarios.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header. """,
    tags=['api_data_import_export'],
)
def import_exported_data():
    """
    Import exported data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/import/openapi',
    description=""" This endpoint allows you to import external API specifications into Postman.

Currently, this endpoint only supports the <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md">OpenAPI</a> specification, for which the `importType` will be `openapi`.

On a successful import, the response will be an array with each element contaning `id`, `name` and `uid` of entities created.

Supported `type`s:

- string
- json
- file

The `input` parameter should be defined based on the `type`.

> To import a file, request body must be form-data with `type` param set to `file`.

**Note**: Refer to examples for different scenarios.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header. """,
    tags=['api_data_import_export'],
)
def import_external_api_specification(body: ImportOpenapiPostRequest = None):
    """
    Import external API specification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/me',
    description=""" the `/me` Postman API endpoint lets you access information about the authenticated user. You can retrieve the authenticated user's username, full name, e-mail address, and any other available information.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['api_management', 'api_relationships'],
)
def api_key_owner():
    """
    API Key Owner
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mocks',
    description=""" This endpoint fetches all the mocks that you have created.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['mock_service_management'],
)
def all_mocks():
    """
    All Mocks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mocks',
    description=""" This endpoint allows you to create a mock on a collection. You can also provide an environment UID to resolve any environment variables in the collection.

You can also specify the context of a workspace to create a mock in directly by passing the `workspace` as a query param.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['mock_service_management'],
)
def create_mock(body: MocksPostRequest = None):
    """
    Create Mock
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mocks/{mock_uid}',
    description=""" This endpoint allows you to delete an existing mock using its `uid`.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['mock_service_management'],
)
def delete_mock(mock_uid: str):
    """
    Delete Mock
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mocks/{mock_uid}',
    description=""" This endpoint fetches you the basic information about a single mock using its `uid`.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['mock_service_management'],
)
def single_mock(mock_uid: str):
    """
    Single Mock
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mocks/{mock_uid}',
    description=""" This endpoint allows you to update a mock you have created using its `uid`. The endpoint allows you to edit fields,
* name
* environment
* description
* private
* versionTag

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['mock_service_management'],
)
def update_mock(mock_uid: str, body: MocksMockUidPutRequest = None):
    """
    Update Mock
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mocks/{mock_uid}/publish',
    description=""" This endpoint publishes the mock you have created using its `uid`

> Requires <a href="#authentication">API Key</a> as `X-Api-Key ` request header or `apikey` URL query parameter. """,
    tags=['mock_service_management'],
)
def publish_mock(mock_uid: str):
    """
    Publish Mock
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mocks/{mock_uid}/unpublish',
    description=""" This endpoint unpublishes the mock you have created using its `uid`

> Requires <a href="#authentication">API Key</a> as `X-Api-Key ` request header or `apikey` URL query parameter. """,
    tags=['mock_service_management'],
)
def unpublish_mock(mock_uid: str):
    """
    Unpublish Mock
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/monitors',
    description=""" The `/monitors` endpoint returns a list of all [monitors](https://monitor.getpostman.com/) that are accessible by you.

The response contains an array of monitors information containing the `name`, `id`, `owner` and `uid` of each monitor.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['monitoring_operations'],
)
def all_monitors():
    """
    All Monitors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/monitors',
    description=""" This endpoint allows you to create a monitor.

Some sample `cron` values are:

| Frequency                  | Cron Pattern   |
|-----------------------|----------------|
| Every 5 minutes       | `*/5 * * * *`  |
| Every 30 minutes     | `*/30 * * * *` |
| Every Hour         | `0 */1 * * *`  |
| Every 6 Hours      | `0 */6 * * *`  |
| Every day at 5pm    | `0 17 * * *`   |
| Every Monday at 12pm  | `0 12 * * MON` |
| Every weekday (Monday - Friday) at 6am | `0 6 * * MON-FRI` |

Note: Currently, you can only create monitors at some limited schedules. You can head to [Postman Monitors](https://monitor.getpostman.com) to see the allowed schedules. 

For more information about the format of the `timezone` value, check this [list of time zones.](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)

You can also specify the context of a workspace to create a monitor in directly by passing the `workspace` as a query param.


> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['monitoring_operations'],
)
def create_monitor(body: MonitorsPostRequest = None):
    """
    Create Monitor
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/monitors/{monitor_uid}',
    description=""" This endpoint can be used to delete an existing monitor using its `uid`.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['monitoring_operations'],
)
def delete_monitor(monitor_uid: str):
    """
    Delete Monitor
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/monitors/{monitor_uid}',
    description=""" This endpoint fetches you basic information about the monitor using its `uid`.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['monitoring_operations'],
)
def single_monitor(monitor_uid: str):
    """
    Single Monitor
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/monitors/{monitor_uid}',
    description=""" This endpoint allows you to update a monitor using its `uid`. Only the monitor name and its schedule can be updated.

Some example `cron` values are:

| Frequency                  | Cron Pattern   |
|-----------------------|----------------|
| Every 5 minutes       | `*/5 * * * *`  |
| Every 30 minutes     | `*/30 * * * *` |
| Every Hour         | `0 */1 * * *`  |
| Every 6 Hours      | `0 */6 * * *`  |
| Every day at 5pm    | `0 17 * * *`   |
| Every Monday at 12pm  | `0 12 * * MON` |
| Every weekday (Monday - Friday) at 6am | `0 6 * * MON-FRI` |

Note: Currently, you can only create monitors at some limited schedules. You can head to [Postman Monitors](https://monitor.getpostman.com) to see the allowed schedules. 

For more information about the format of the `timezone` value, check this [list of time zones.](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['monitoring_operations'],
)
def update_monitor(monitor_uid: str, body: MonitorsMonitorUidPutRequest = None):
    """
    Update Monitor
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/monitors/{monitor_uid}/run',
    description=""" This endpoint will run the monitor instantly and wait for the monitor to run completely. It responds with the run results.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['monitoring_operations'],
)
def run_a_monitor(monitor_uid: str):
    """
    Run a Monitor
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhooks',
    description=""" Create a webhook that triggers a collection with your custom payload.

You can specify the webhook name and the collection to trigger by using the following attributes of the `webhook` object on your JSON body:

* `name`: the name of the webhook that you're creating.
* `collection`: the ID of the collection that you want to trigger once this webhook is called.

Once created, the webhook URL can be retrieved by accessing the `webhookUrl` attribute of the `webhook` object on the response JSON payload. """,
    tags=['webhook_creation', 'workspace_operations'],
)
def create_webhook(workspace: Optional[str] = None, body: WebhooksPostRequest = None):
    """
    Create Webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/workspaces',
    description=""" The `/workspaces` endpoint returns a list of all [workspaces](https://www.getpostman.com/docs/v6/postman/workspaces/intro_to_workspaces) that is accessible by you. The list includes your own workspaces and the workspaces that you have access to.

The response contains an array of collection information containing the `name`, `id`, and `type` of each workspace.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['workspace_operations'],
)
def all_workspaces():
    """
    All workspaces
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/workspaces',
    description=""" This endpoint allows you to create a workspace and populate it with entities like `collections`, `environments`, `mocks` and `monitors` using their `uid`.

On successful creation of the workspace, the response returns the workspcae `name` and `id`.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['workspace_operations'],
)
def create_workspace(body: WorkspacesPostRequest = None):
    """
    Create Workspace
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/workspaces/{workspace_id}',
    description=""" This endpoint allows you to delete an existing workspace.

On successful deletion of the workspace, the response returns the `id`.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['workspace_operations'],
)
def delete_workspace(workspace_id: str):
    """
    Delete Workspace
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/workspaces/{workspace_id}',
    description=""" Access the contents of a workspace that is accessible to you using its id (`id`). Includes the collections, environments, mocks and monitors of that workspace.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter. """,
    tags=['workspace_operations'],
)
def single_workspace(workspace_id: str):
    """
    Single workspace
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/workspaces/{workspace_id}',
    description=""" This endpoint allows you to update a workspace and update it's association to entities like `collections`, `environments`, `mocks` and `monitors` using their `uid`.

On successful updation of the workspace, the response returns the workspcae `name` and `id`.

> Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.

**Note** : The endpoint expects you to send the desired state of the workspace in terms of the associated entities so be careful when trying to update these entities.

For eg. if your workspace has collections A and B, and in the update call, you send C's uid in the collections array, then A and B would be removed from the workspace and C would be added. """,
    tags=['workspace_operations'],
)
def update_workspace(workspace_id: str, body: WorkspacesWorkspaceIdPutRequest = None):
    """
    Update Workspace
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
