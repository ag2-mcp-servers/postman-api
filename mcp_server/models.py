# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:38:22+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class Api(BaseModel):
    description: Optional[str] = Field(None, examples=['This is description.'])
    name: Optional[str] = Field(None, examples=['Sync Service API'])
    summary: Optional[str] = Field(
        None, examples=['This is supposed to be a short summary.']
    )


class ApisPostRequest(BaseModel):
    api: Optional[Api] = None


class Api1(BaseModel):
    createdAt: Optional[str] = Field(None, examples=['2019-02-12 19:34:49'])
    createdBy: Optional[str] = Field(None, examples=['5665'])
    description: Optional[str] = Field(
        None, examples=['This is supposed to handle markdown *descriptions*.']
    )
    id: Optional[str] = Field(None, examples=['387c2863-6ee3-4a56-8210-225f774edade'])
    name: Optional[str] = Field(None, examples=['Sync API'])
    summary: Optional[str] = Field(None, examples=['This is a summary'])
    updatedAt: Optional[str] = Field(None, examples=['2019-02-12 19:34:49'])


class ApisPostResponse(BaseModel):
    api: Optional[Api1] = None


class Api2(BaseModel):
    id: Optional[str] = Field(None, examples=['387c2863-6ee3-4a56-8210-225f774edade'])


class ApisApiIdDeleteResponse(BaseModel):
    api: Optional[Api2] = None


class Api3(BaseModel):
    createdAt: Optional[str] = Field(None, examples=['2019-02-12 19:34:49'])
    createdBy: Optional[str] = Field(None, examples=['5665'])
    description: Optional[str] = Field(
        None, examples=['This is a description.This is a description.']
    )
    id: Optional[str] = Field(None, examples=['387c2863-6ee3-4a56-8210-225f774edade'])
    name: Optional[str] = Field(None, examples=['Sync API'])
    summary: Optional[str] = Field(None, examples=['This is a summary'])
    updatedAt: Optional[str] = Field(None, examples=['2019-02-12 19:34:49'])


class ApisApiIdGetResponse(BaseModel):
    api: Optional[Api3] = None


class Api4(BaseModel):
    description: Optional[str] = Field(
        None, examples=['This is an updated Description']
    )
    name: Optional[str] = Field(None, examples=['New name'])


class ApisApiIdPutRequest(BaseModel):
    api: Optional[Api4] = None


class Api5(BaseModel):
    createdAt: Optional[str] = Field(None, examples=['2019-02-12 19:34:49'])
    createdBy: Optional[str] = Field(None, examples=['5665'])
    description: Optional[str] = Field(None, examples=['This is a description.'])
    id: Optional[str] = Field(None, examples=['387c2863-6ee3-4a56-8210-225f774edade'])
    name: Optional[str] = Field(None, examples=['Sync API'])
    summary: Optional[str] = Field(None, examples=['This is a summary'])
    updatedAt: Optional[str] = Field(None, examples=['2019-02-12 19:34:49'])


class ApisApiIdPutResponse(BaseModel):
    api: Optional[Api5] = None


class Version(BaseModel):
    createdAt: Optional[str] = Field(None, examples=['2019-02-12 19:34:49'])
    createdBy: Optional[str] = Field(None, examples=['5665'])
    description: Optional[str] = Field(None, examples=['Description'])
    id: Optional[str] = Field(None, examples=['024660a6-c837-46ca-91d8-7e8dd7c669de'])
    name: Optional[str] = Field(None, examples=['0.1'])
    summary: Optional[str] = Field(None, examples=['Summary'])
    updatedAt: Optional[str] = Field(None, examples=['2019-02-12 19:34:49'])


class ApisApiIdVersionsGetResponse(BaseModel):
    versions: Optional[List[Version]] = None


class Relations(BaseModel):
    documentation: Optional[bool] = Field(None, examples=[True])
    mock: Optional[bool] = Field(None, examples=[True])
    monitor: Optional[bool] = Field(None, examples=[True])


class Source(BaseModel):
    id: Optional[str] = Field(None, examples=['{{apiVersionId}}'])
    relations: Optional[Relations] = None
    schema_: Optional[bool] = Field(None, alias='schema', examples=[True])


class Version1(BaseModel):
    name: Optional[str] = Field(None, examples=['1.0'])
    source: Optional[Source] = None


class ApisApiIdVersionsPostRequest(BaseModel):
    version: Optional[Version1] = None


class Version2(BaseModel):
    api: Optional[str] = Field(None, examples=['2b95d07c-8379-4bd1-924f-e7e1af185284'])
    id: Optional[str] = Field(None, examples=['d71cf403-c549-4c7c-9dc6-a6a105acf67c'])
    name: Optional[str] = Field(None, examples=['1.0'])


class ApisApiIdVersionsPostResponse(BaseModel):
    version: Optional[Version2] = None


class Version3(BaseModel):
    id: Optional[str] = Field(None, examples=['03c17f53-7e2e-427d-b55a-006b244f29ff'])


class ApisApiIdVersionsApiVersionIdDeleteResponse(BaseModel):
    version: Optional[Version3] = None


class Version4(BaseModel):
    api: Optional[str] = Field(None, examples=['06e41ca3-8bea-4bc5-a726-70338b9f1940'])
    createdAt: Optional[str] = Field(None, examples=['2019-07-21T16:31:15.000Z'])
    createdBy: Optional[str] = Field(None, examples=['5665'])
    id: Optional[str] = Field(None, examples=['03c17f53-7e2e-427d-b55a-006b244f29ff'])
    name: Optional[str] = Field(None, examples=['0.1'])
    schema_: Optional[List[str]] = Field(None, alias='schema')
    updatedAt: Optional[str] = Field(None, examples=['2019-07-21T16:31:15.000Z'])
    updatedBy: Optional[str] = Field(None, examples=['5665'])


class ApisApiIdVersionsApiVersionIdGetResponse(BaseModel):
    version: Optional[Version4] = None


class Version5(BaseModel):
    name: Optional[str] = Field(None, examples=['2.0'])


class ApisApiIdVersionsApiVersionIdPutRequest(BaseModel):
    version: Optional[Version5] = None


class Version6(BaseModel):
    api: Optional[str] = Field(None, examples=['2b95d07c-8379-4bd1-924f-e7e1af185284'])
    createdAt: Optional[str] = Field(None, examples=['2019-07-26T11:24:15.000Z'])
    createdBy: Optional[str] = Field(None, examples=['12'])
    id: Optional[str] = Field(None, examples=['d71cf403-c549-4c7c-9dc6-a6a105acf67c'])
    name: Optional[str] = Field(None, examples=['2.0'])
    updatedAt: Optional[str] = Field(None, examples=['2019-08-09T09:27:36.000Z'])
    updatedBy: Optional[str] = Field(None, examples=['5665'])


class ApisApiIdVersionsApiVersionIdPutResponse(BaseModel):
    version: Optional[Version6] = None


class ContracttestItem(BaseModel):
    collectionId: Optional[str] = Field(
        None, examples=['7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745']
    )
    id: Optional[str] = Field(None, examples=['2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2'])
    name: Optional[str] = Field(None, examples=['C test'])
    updatedAt: Optional[str] = Field(None, examples=['2019-08-29T10:18:11.000Z'])


class ApisApiIdVersionsApiVersionIdContracttestGetResponse(BaseModel):
    contracttest: Optional[List[ContracttestItem]] = None


class DocumentationItem(BaseModel):
    collectionId: Optional[str] = Field(
        None, examples=['7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745']
    )
    id: Optional[str] = Field(None, examples=['2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2'])
    name: Optional[str] = Field(None, examples=['C test'])
    updatedAt: Optional[str] = Field(None, examples=['2019-08-29T10:18:11.000Z'])


class ApisApiIdVersionsApiVersionIdDocumentationGetResponse(BaseModel):
    documentation: Optional[List[DocumentationItem]] = None


class EnvironmentItem(BaseModel):
    id: Optional[str] = Field(None, examples=['2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2'])
    name: Optional[str] = Field(None, examples=['C test'])
    updatedAt: Optional[str] = Field(None, examples=['2019-08-29T10:18:11.000Z'])


class ApisApiIdVersionsApiVersionIdEnvironmentGetResponse(BaseModel):
    environment: Optional[List[EnvironmentItem]] = None


class IntegrationtestItem(BaseModel):
    collectionId: Optional[str] = Field(
        None, examples=['7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745']
    )
    id: Optional[str] = Field(None, examples=['2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2'])
    name: Optional[str] = Field(None, examples=['C test'])
    updatedAt: Optional[str] = Field(None, examples=['2019-08-29T10:18:11.000Z'])


class ApisApiIdVersionsApiVersionIdIntegrationtestGetResponse(BaseModel):
    integrationtest: Optional[List[IntegrationtestItem]] = None


class MonitorItem(BaseModel):
    id: Optional[str] = Field(None, examples=['2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2'])
    monitorId: Optional[str] = Field(
        None, examples=['7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745']
    )
    name: Optional[str] = Field(None, examples=['C test'])
    updatedAt: Optional[str] = Field(None, examples=['2019-08-29T10:18:11.000Z'])


class ApisApiIdVersionsApiVersionIdMonitorGetResponse(BaseModel):
    monitor: Optional[List[MonitorItem]] = None


class Field2a9b8fa888b74b8683728e3f6f6e07f2(BaseModel):
    id: Optional[str] = Field(None, examples=['2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2'])
    name: Optional[str] = Field(None, examples=['C test'])
    updatedAt: Optional[str] = Field(None, examples=['2019-08-29T10:18:11.000Z'])


class Contracttest(BaseModel):
    field_2a9b8fa8_88b7_4b86_8372_8e3f6f6e07f2: Optional[
        Field2a9b8fa888b74b8683728e3f6f6e07f2
    ] = Field(None, alias='2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2')


class Field521b0486Ab914d3a918943c9380a0533(BaseModel):
    id: Optional[str] = Field(None, examples=['521b0486-ab91-4d3a-9189-43c9380a0533'])
    name: Optional[str] = Field(None, examples=['C1'])
    updatedAt: Optional[str] = Field(None, examples=['2019-08-29T11:40:39.000Z'])


class A236b715E682460b97b6C1db24f7612e(BaseModel):
    id: Optional[str] = Field(None, examples=['a236b715-e682-460b-97b6-c1db24f7612e'])
    name: Optional[str] = Field(None, examples=['C test'])
    updatedAt: Optional[str] = Field(None, examples=['2019-08-29T10:18:11.000Z'])


class Integrationtest(BaseModel):
    field_521b0486_ab91_4d3a_9189_43c9380a0533: Optional[
        Field521b0486Ab914d3a918943c9380a0533
    ] = Field(None, alias='521b0486-ab91-4d3a-9189-43c9380a0533')
    a236b715_e682_460b_97b6_c1db24f7612e: Optional[A236b715E682460b97b6C1db24f7612e] = (
        Field(None, alias='a236b715-e682-460b-97b6-c1db24f7612e')
    )


class Field4ccd755f2c80481bA26249b55e12f5e1(BaseModel):
    id: Optional[str] = Field(None, examples=['4ccd755f-2c80-481b-a262-49b55e12f5e1'])
    name: Optional[str] = Field(None, examples=['Mock'])
    updatedAt: Optional[str] = Field(None, examples=['2019-08-20T10:18:13.000Z'])
    url: Optional[str] = Field(
        None,
        examples=['https://4ccd755f-2c80-481b-a262-49b55e12f5e1.mock-beta.pstmn.io'],
    )


class Mock(BaseModel):
    field_4ccd755f_2c80_481b_a262_49b55e12f5e1: Optional[
        Field4ccd755f2c80481bA26249b55e12f5e1
    ] = Field(None, alias='4ccd755f-2c80-481b-a262-49b55e12f5e1')


class Relations1(BaseModel):
    contracttest: Optional[Contracttest] = None
    integrationtest: Optional[Integrationtest] = None
    mock: Optional[Mock] = None


class ApisApiIdVersionsApiVersionIdRelationsGetResponse(BaseModel):
    relations: Optional[Relations1] = None


class ApisApiIdVersionsApiVersionIdRelationsPostRequest(BaseModel):
    contracttest: Optional[List[str]] = None
    documentation: Optional[List[str]] = None
    mock: Optional[List[str]] = None
    testsuite: Optional[List[str]] = None


class ApisApiIdVersionsApiVersionIdRelationsPostResponse(BaseModel):
    contracttest: Optional[List[str]] = None
    documentation: Optional[List[str]] = None
    testsuite: Optional[List[str]] = None


class Schema(BaseModel):
    language: Optional[str] = Field(None, examples=['yaml'])
    schema_: Optional[str] = Field(
        None,
        alias='schema',
        examples=[
            '{\n  "openapi": "3.0.0",\n  "info": null,\n  "version": "v1.0",\n  "title": "APi",\n  "servers": [\n    {\n      "url": "http://localhost:3000"\n    }\n  ],\n  "paths": {\n    "/user": {\n      "get": {\n        "summary": "Returns details about a particular user",\n        "operationId": "listUser",\n        "tags": [\n          "user"\n        ],\n        "parameters": [\n          {\n            "name": "id",\n            "in": "query",\n            "description": "ID of the user",\n            "required": true,\n            "schema": {\n              "type": "integer",\n              "format": "int32"\n            }\n          }\n        ],\n        "responses": {\n          "200": {\n            "description": "Details about a user by ID",\n            "headers": {\n              "x-next": {\n                "description": "A link to the next page of responses",\n                "schema": {\n                  "type": "string"\n                }\n              }\n            },\n            "content": {\n              "application/json": {\n                "schema": {\n                  "$ref": "\\\\\'#/components/schemas/User\\\\\'"\n                }\n              }\n            }\n          },\n          "default": {\n            "description": "Unexpected error",\n            "content": {\n              "application/json": {\n                "schema": {\n                  "$ref": "\\\\\'#/components/schemas/Error\\\\\'"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  "components": {\n    "schemas": {\n      "User": {\n        "type": "object",\n        "required": [\n          "id",\n          "name"\n        ],\n        "properties": {\n          "id": {\n            "type": "integer",\n            "format": "int64"\n          },\n          "name": {\n            "type": "string"\n          },\n          "tag": {\n            "type": "string"\n          }\n        }\n      },\n      "Error": {\n        "type": "object",\n        "required": [\n          "code",\n          "message"\n        ],\n        "properties": {\n          "code": {\n            "type": "integer",\n            "format": "int32"\n          },\n          "message": {\n            "type": "string"\n          }\n        }\n      }\n    }\n  }\n}'
        ],
    )
    type: Optional[str] = Field(None, examples=['openapi3'])


class ApisApiIdVersionsApiVersionIdSchemasPostRequest(BaseModel):
    schema_: Optional[Schema] = Field(None, alias='schema')


class Schema1(BaseModel):
    apiVersion: Optional[str] = Field(
        None, examples=['ad810c39-df60-434e-a76f-a2192cd8d81f']
    )
    createdAt: Optional[str] = Field(None, examples=['2019-02-12 19:34:49'])
    createdBy: Optional[str] = Field(None, examples=['5665'])
    id: Optional[str] = Field(None, examples=['e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822'])
    language: Optional[str] = Field(None, examples=['yaml'])
    type: Optional[str] = Field(None, examples=['openapi3'])
    updateBy: Optional[str] = Field(None, examples=['5665'])
    updatedAt: Optional[str] = Field(None, examples=['2019-02-12 19:34:49'])


class ApisApiIdVersionsApiVersionIdSchemasPostResponse(BaseModel):
    schema_: Optional[Schema1] = Field(None, alias='schema')


class ApisApiIdVersionsApiVersionIdSchemasSchemaIdGetResponse(BaseModel):
    schema_: Optional[Schema1] = Field(None, alias='schema')


class Schema3(BaseModel):
    language: Optional[str] = Field(None, examples=['json'])
    schema_: Optional[str] = Field(
        None,
        alias='schema',
        examples=[
            '{\n  "openapi": "3.0.0",\n  "info": null,\n  "version": "v1.0",\n  "title": "APi",\n  "servers": [\n    {\n      "url": "http://localhost:3000"\n    }\n  ],\n  "paths": {\n    "/user": {\n      "get": {\n        "summary": "Returns details about a particular user",\n        "operationId": "listUser",\n        "tags": [\n          "user"\n        ],\n        "parameters": [\n          {\n            "name": "id",\n            "in": "query",\n            "description": "ID of the user",\n            "required": true,\n            "schema": {\n              "type": "integer",\n              "format": "int32"\n            }\n          }\n        ],\n        "responses": {\n          "200": {\n            "description": "Details about a user by ID",\n            "headers": {\n              "x-next": {\n                "description": "A link to the next page of responses",\n                "schema": {\n                  "type": "string"\n                }\n              }\n            },\n            "content": {\n              "application/json": {\n                "schema": {\n                  "$ref": "\\\\\'#/components/schemas/User\\\\\'"\n                }\n              }\n            }\n          },\n          "default": {\n            "description": "Unexpected error",\n            "content": {\n              "application/json": {\n                "schema": {\n                  "$ref": "\\\\\'#/components/schemas/Error\\\\\'"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  "components": {\n    "schemas": {\n      "User": {\n        "type": "object",\n        "required": [\n          "id",\n          "name"\n        ],\n        "properties": {\n          "id": {\n            "type": "integer",\n            "format": "int64"\n          },\n          "name": {\n            "type": "string"\n          },\n          "tag": {\n            "type": "string"\n          }\n        }\n      },\n      "Error": {\n        "type": "object",\n        "required": [\n          "code",\n          "message"\n        ],\n        "properties": {\n          "code": {\n            "type": "integer",\n            "format": "int32"\n          },\n          "message": {\n            "type": "string"\n          }\n        }\n      }\n    }\n  }\n}'
        ],
    )
    type: Optional[str] = Field(None, examples=['openapi3'])


class ApisApiIdVersionsApiVersionIdSchemasSchemaIdPutRequest(BaseModel):
    schema_: Optional[Schema3] = Field(None, alias='schema')


class Schema4(BaseModel):
    apiVersion: Optional[str] = Field(
        None, examples=['ad810c39-df60-434e-a76f-a2192cd8d81f']
    )
    createdAt: Optional[str] = Field(None, examples=['2019-02-12 19:34:49'])
    createdBy: Optional[str] = Field(None, examples=['5665'])
    id: Optional[str] = Field(None, examples=['e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822'])
    language: Optional[str] = Field(None, examples=['yaml'])
    type: Optional[str] = Field(None, examples=['openapi3'])
    updateBy: Optional[str] = Field(None, examples=['5665'])
    updatedAt: Optional[str] = Field(None, examples=['2019-02-12 19:34:49'])


class ApisApiIdVersionsApiVersionIdSchemasSchemaIdPutResponse(BaseModel):
    schema_: Optional[Schema4] = Field(None, alias='schema')


class Relation(BaseModel):
    type: Optional[str] = Field(None, examples=['contracttest'])


class ApisApiIdVersionsApiVersionIdSchemasSchemaIdCollectionsPostRequest(BaseModel):
    name: Optional[str] = Field(None, examples=['My generated collection'])
    relations: Optional[List[Relation]] = None


class Collection(BaseModel):
    id: Optional[str] = Field(None, examples=['e6b0d46a-8722-4f42-ab86-f5f473187ddf'])
    uid: Optional[str] = Field(
        None, examples=['112098-e6b0d46a-8722-4f42-ab86-f5f473187ddf']
    )


class Relation1(BaseModel):
    id: Optional[str] = Field(None, examples=['4b40f06a-5a6a-448f-bfcd-a6dbcb68da22'])
    type: Optional[str] = Field(None, examples=['contracttest'])


class ApisApiIdVersionsApiVersionIdSchemasSchemaIdCollectionsPostResponse(BaseModel):
    collection: Optional[Collection] = None
    relations: Optional[List[Relation1]] = None


class TestsuiteItem(BaseModel):
    collectionId: Optional[str] = Field(
        None, examples=['7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745']
    )
    id: Optional[str] = Field(None, examples=['2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2'])
    name: Optional[str] = Field(None, examples=['C test'])
    updatedAt: Optional[str] = Field(None, examples=['2019-08-29T10:18:11.000Z'])


class ApisApiIdVersionsApiVersionIdTestsuiteGetResponse(BaseModel):
    testsuite: Optional[List[TestsuiteItem]] = None


class ApisApiIdVersionsApiVersionIdEntityTypeEntityIdSyncWithSchemaPutResponse(
    BaseModel
):
    success: Optional[bool] = Field(None, examples=[True])


class Error(BaseModel):
    message: Optional[str] = Field(
        None,
        examples=[
            'Unable to validate. Only the OpenAPI 3.0 schema format is supported.'
        ],
    )
    name: Optional[str] = Field(None, examples=['validationFailed'])


class ApisApiIdVersionsApiVersionIdEntityTypeEntityIdSyncWithSchemaPutResponse1(
    BaseModel
):
    error: Optional[Error] = None


class Collection1(BaseModel):
    id: Optional[str] = Field(None, examples=['dac5eac9-148d-a32e-b76b-3edee9da28f7'])
    name: Optional[str] = Field(None, examples=['Cloud API'])
    owner: Optional[str] = Field(None, examples=['631643'])
    uid: Optional[str] = Field(
        None, examples=['631643-dac5eac9-148d-a32e-b76b-3edee9da28f7']
    )


class CollectionsGetResponse(BaseModel):
    collections: Optional[List[Collection1]] = None


class Info(BaseModel):
    description: Optional[str] = Field(
        None, examples=['This is just a sample collection.']
    )
    name: Optional[str] = Field(None, examples=['Sample Collection {{$randomInt}}'])
    schema_: Optional[str] = Field(
        None,
        alias='schema',
        examples=[
            'https://schema.getpostman.com/json/collection/v2.1.0/collection.json'
        ],
    )


class Body(BaseModel):
    mode: Optional[str] = Field(None, examples=['raw'])
    raw: Optional[str] = Field(None, examples=['{"data": "123"}'])


class HeaderItem(BaseModel):
    key: Optional[str] = Field(None, examples=['Content-Type'])
    value: Optional[str] = Field(None, examples=['application/json'])


class Request(BaseModel):
    body: Optional[Body] = None
    description: Optional[str] = Field(None, examples=['This is a sample POST Request'])
    header: Optional[List[HeaderItem]] = None
    method: Optional[str] = Field(None, examples=['POST'])
    url: Optional[str] = Field(None, examples=['https://postman-echo.com/post'])


class ItemItem1(BaseModel):
    name: Optional[str] = Field(None, examples=['Sample POST Request'])
    request: Optional[Request] = None


class ItemItem(BaseModel):
    item: Optional[List[ItemItem1]] = None
    name: Optional[str] = Field(None, examples=['This is a folder'])


class Collection2(BaseModel):
    info: Optional[Info] = None
    item: Optional[List[ItemItem]] = None


class CollectionsPostRequest(BaseModel):
    collection: Optional[Collection2] = None


class Collection3(BaseModel):
    id: Optional[str] = Field(None, examples=['2412a72c-1d8e-491b-aced-93809c0e94e9'])
    name: Optional[str] = Field(None, examples=['Sample Collection'])
    uid: Optional[str] = Field(
        None, examples=['5852-2412a72c-1d8e-491b-aced-93809c0e94e9']
    )


class CollectionsPostResponse(BaseModel):
    collection: Optional[Collection3] = None


class Error1(BaseModel):
    message: Optional[str] = Field(
        None, examples=['Missing required property: name at info']
    )
    name: Optional[str] = Field(None, examples=['malformedRequestError'])


class CollectionsPostResponse1(BaseModel):
    error: Optional[Error1] = None


class CollectionsForkCollectionUidPostRequest(BaseModel):
    name: Optional[str] = Field(None, examples=['Fork name'])


class CollectionsMergePostRequest(BaseModel):
    destination: Optional[str] = Field(
        None, examples=['{{destination_collection_uid}}']
    )
    source: Optional[str] = Field(None, examples=['{{source_collection_uid}}'])
    strategy: Optional[str] = Field(None, examples=['deleteSource'])


class Collection4(BaseModel):
    id: Optional[str] = Field(None, examples=['a14c6da7-afba-4a84-bf22-4febbaaced6c'])
    uid: Optional[str] = Field(
        None, examples=['5852-a14c6da7-afba-4a84-bf22-4febbaaced6c']
    )


class CollectionsCollectionUidDeleteResponse(BaseModel):
    collection: Optional[Collection4] = None


class Details(BaseModel):
    id: Optional[str] = Field(None, examples=['a14c6da7-afba-4a84-bf22-4febbaaced6c'])
    item: Optional[str] = Field(None, examples=['collection'])


class Error2(BaseModel):
    details: Optional[Details] = None
    message: Optional[str] = Field(
        None, examples=['The specified item does not exist.']
    )
    name: Optional[str] = Field(None, examples=['instanceNotFoundError'])


class CollectionsCollectionUidDeleteResponse1(BaseModel):
    error: Optional[Error2] = None


class Info1(BaseModel):
    field_postman_id: Optional[str] = Field(
        None, alias='_postman_id', examples=['f2e66c2e-5297-e4a5-739e-20cbb90900e3']
    )
    description: Optional[str] = Field(
        None,
        examples=[
            'This is a sample collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.'
        ],
    )
    name: Optional[str] = Field(None, examples=['Sample Collection'])
    schema_: Optional[str] = Field(
        None,
        alias='schema',
        examples=[
            'https://schema.getpostman.com/json/collection/v2.0.0/collection.json'
        ],
    )


class Script(BaseModel):
    exec: Optional[str] = Field(
        None,
        examples=[
            'var responseJSON;\ntry {\n    tests["Body contains headers"] = responseBody.has("headers");\n    responseJSON = JSON.parse(responseBody);\n    tests["Header contains host"] = "host" in responseJSON.headers;\n    tests["Header contains test parameter sent as part of request header"] = "my-sample-header" in responseJSON.headers;\n}\ncatch (e) { }\n\n\n\n'
        ],
    )
    type: Optional[str] = Field(None, examples=['text/javascript'])


class EventItem(BaseModel):
    listen: Optional[str] = Field(None, examples=['test'])
    script: Optional[Script] = None


class Body1(BaseModel):
    formdata: Optional[List] = None
    mode: Optional[str] = Field(None, examples=['formdata'])


class HeaderItem1(BaseModel):
    description: Optional[str] = Field(None, examples=[''])
    key: Optional[str] = Field(None, examples=['my-sample-header'])
    value: Optional[str] = Field(None, examples=['Lorem ipsum dolor sit amet'])


class Request1(BaseModel):
    body: Optional[Body1] = None
    description: Optional[str] = Field(None, examples=[''])
    header: Optional[List[HeaderItem1]] = None
    method: Optional[str] = Field(None, examples=['GET'])
    url: Optional[str] = Field(None, examples=['https://echo.getpostman.com/headers'])


class ItemItem2(BaseModel):
    event: Optional[List[EventItem]] = None
    id: Optional[str] = Field(None, examples=['82ee981b-e19f-962a-401e-ea34ebfb4848'])
    name: Optional[str] = Field(None, examples=['Request Headers'])
    request: Optional[Request1] = None
    response: Optional[List] = None


class Collection5(BaseModel):
    info: Optional[Info1] = None
    item: Optional[List[ItemItem2]] = None
    variables: Optional[List] = None


class CollectionsCollectionUidGetResponse(BaseModel):
    collection: Optional[Collection5] = None


class Info2(BaseModel):
    field_postman_id: Optional[str] = Field(
        None, alias='_postman_id', examples=['174bad7c-07e3-45f3-914f-36cf84e5586f']
    )
    description: Optional[str] = Field(
        None, examples=['This is just a sample collection.']
    )
    name: Optional[str] = Field(None, examples=['Sample Collection {{$randomInt}}'])
    schema_: Optional[str] = Field(
        None,
        alias='schema',
        examples=[
            'https://schema.getpostman.com/json/collection/v2.1.0/collection.json'
        ],
    )


class Body2(BaseModel):
    mode: Optional[str] = Field(None, examples=['raw'])
    raw: Optional[str] = Field(None, examples=['{"data": "123"}'])


class HeaderItem2(BaseModel):
    key: Optional[str] = Field(None, examples=['Content-Type'])
    value: Optional[str] = Field(None, examples=['application/json'])


class Request2(BaseModel):
    body: Optional[Body2] = None
    description: Optional[str] = Field(None, examples=['This is a sample POST Request'])
    header: Optional[List[HeaderItem2]] = None
    method: Optional[str] = Field(None, examples=['POST'])
    url: Optional[str] = Field(None, examples=['https://postman-echo.com/post'])


class ItemItem4(BaseModel):
    name: Optional[str] = Field(None, examples=['Sample POST Request'])
    request: Optional[Request2] = None


class ItemItem3(BaseModel):
    item: Optional[List[ItemItem4]] = None
    name: Optional[str] = Field(None, examples=['This is a folder'])


class Collection6(BaseModel):
    info: Optional[Info2] = None
    item: Optional[List[ItemItem3]] = None


class CollectionsCollectionUidPutRequest(BaseModel):
    collection: Optional[Collection6] = None


class Collection7(BaseModel):
    id: Optional[str] = Field(None, examples=['1d3daef4-2037-4584-ab86-bafd8c8f8a55'])
    name: Optional[str] = Field(None, examples=['Sample Collection'])
    uid: Optional[str] = Field(
        None, examples=['5852-1d3daef4-2037-4584-ab86-bafd8c8f8a55']
    )


class CollectionsCollectionUidPutResponse(BaseModel):
    collection: Optional[Collection7] = None


class Error3(BaseModel):
    message: Optional[str] = Field(
        None,
        examples=[
            'The collection ID in the path does not match the collection ID in the request body.'
        ],
    )
    name: Optional[str] = Field(None, examples=['collectionMismatchError'])


class CollectionsCollectionUidPutResponse1(BaseModel):
    error: Optional[Error3] = None


class Error4(BaseModel):
    message: Optional[str] = Field(
        None, examples=['You do not have enough permissions to perform this action.']
    )
    name: Optional[str] = Field(None, examples=['forbiddenError'])


class CollectionsCollectionUidPutResponse2(BaseModel):
    error: Optional[Error4] = None


class Details1(BaseModel):
    id: Optional[str] = Field(None, examples=['1d3daef4-2037-4584-ab86-bafd8c8f8a54'])
    item: Optional[str] = Field(None, examples=['collection'])


class Error5(BaseModel):
    details: Optional[Details1] = None
    message: Optional[str] = Field(
        None, examples=['The specified item does not exist.']
    )
    name: Optional[str] = Field(None, examples=['instanceNotFoundError'])


class CollectionsCollectionUidPutResponse3(BaseModel):
    error: Optional[Error5] = None


class Environment(BaseModel):
    id: Optional[str] = Field(None, examples=['357668d2-84f1-2264-438b-113095359f80'])
    name: Optional[str] = Field(None, examples=['Postman Cloud API'])
    owner: Optional[str] = Field(None, examples=['631643'])
    uid: Optional[str] = Field(
        None, examples=['631643-357668d2-84f1-2264-438b-113095359f80']
    )


class EnvironmentsGetResponse(BaseModel):
    environments: Optional[List[Environment]] = None


class Value(BaseModel):
    key: Optional[str] = Field(None, examples=['variable_name_1'])
    value: Optional[str] = Field(None, examples=['The value of the variable'])


class Environment1(BaseModel):
    name: Optional[str] = Field(None, examples=['Sample Environment Name (required)'])
    values: Optional[List[Value]] = None


class EnvironmentsPostRequest(BaseModel):
    environment: Optional[Environment1] = None


class Environment2(BaseModel):
    id: Optional[str] = Field(None, examples=['f158266e-306b-4702-a2b9-e4ede7878b7a'])
    name: Optional[str] = Field(None, examples=['Sample Environment Name (required)'])
    uid: Optional[str] = Field(
        None, examples=['5665-f158266e-306b-4702-a2b9-e4ede7878b7a']
    )


class EnvironmentsPostResponse(BaseModel):
    environment: Optional[Environment2] = None


class Error6(BaseModel):
    message: Optional[str] = Field(
        None, examples=['Missing required property: environment']
    )
    name: Optional[str] = Field(None, examples=['malformedRequestError'])


class EnvironmentsPostResponse1(BaseModel):
    error: Optional[Error6] = None


class Environment3(BaseModel):
    id: Optional[str] = Field(None, examples=['4dfb28a4-9a6c-4ce4-b31a-17c26a8b2cce'])
    uid: Optional[str] = Field(
        None, examples=['5852-4dfb28a4-9a6c-4ce4-b31a-17c26a8b2cce']
    )


class EnvironmentsEnvironmentUidDeleteResponse(BaseModel):
    environment: Optional[Environment3] = None


class Error7(BaseModel):
    message: Optional[str] = Field(
        None, examples=['The specified environment does not exist.']
    )
    name: Optional[str] = Field(None, examples=['instanceNotFoundError'])


class EnvironmentsEnvironmentUidDeleteResponse1(BaseModel):
    error: Optional[Error7] = None


class Value1(BaseModel):
    enabled: Optional[bool] = Field(None, examples=[True])
    hovered: Optional[bool] = Field(None, examples=[False])
    key: Optional[str] = Field(None, examples=['postman_api_key'])
    type: Optional[str] = Field(None, examples=['text'])
    value: Optional[str] = Field(None, examples=[''])


class Environment4(BaseModel):
    id: Optional[str] = Field(None, examples=['84a119b6-f4b1-9120-5f11-a73b17818d70'])
    name: Optional[str] = Field(None, examples=['Postman Cloud API.template'])
    values: Optional[List[Value1]] = None


class EnvironmentsEnvironmentUidGetResponse(BaseModel):
    environment: Optional[Environment4] = None


class Value2(BaseModel):
    key: Optional[str] = Field(None, examples=['name'])
    value: Optional[str] = Field(None, examples=['Bruce Wayne'])


class Environment5(BaseModel):
    name: Optional[str] = Field(None, examples=['New Name'])
    values: Optional[List[Value2]] = None


class EnvironmentsEnvironmentUidPutRequest(BaseModel):
    environment: Optional[Environment5] = None


class Environment6(BaseModel):
    id: Optional[str] = Field(None, examples=['357668d2-84f1-2264-438b-113095359f80'])
    name: Optional[str] = Field(None, examples=['New Name'])
    uid: Optional[str] = Field(
        None, examples=['631643-357668d2-84f1-2264-438b-113095359f80']
    )


class EnvironmentsEnvironmentUidPutResponse(BaseModel):
    environment: Optional[Environment6] = None


class Error8(BaseModel):
    message: Optional[str] = Field(
        None, examples=['Invalid type: null (expected object) at environment.values.0']
    )
    name: Optional[str] = Field(None, examples=['malformedRequestError'])


class EnvironmentsEnvironmentUidPutResponse1(BaseModel):
    error: Optional[Error8] = None


class Collection8(BaseModel):
    id: Optional[str] = Field(None, examples=['b31be584-1b1e-4444-b581-761edf88fe77'])
    name: Optional[str] = Field(None, examples=['Swagger Petstore'])
    uid: Optional[str] = Field(
        None, examples=['2282-b31be584-1b1e-4444-b581-761edf88fe77']
    )


class ImportExportedPostResponse(BaseModel):
    collections: Optional[List[Collection8]] = None


class Details2(BaseModel):
    param: Optional[str] = Field(None, examples=['type'])


class Error9(BaseModel):
    details: Optional[Details2] = None
    message: Optional[str] = Field(
        None,
        examples=[
            'The request body is missing a value for the type parameter. Check your request and try again.'
        ],
    )
    name: Optional[str] = Field(None, examples=['paramMissingError'])


class ImportExportedPostResponse1(BaseModel):
    error: Optional[Error9] = None


class License(BaseModel):
    name: Optional[str] = Field(None, examples=['MIT'])


class Info3(BaseModel):
    license: Optional[License] = None
    title: Optional[str] = Field(None, examples=['Swagger Petstore'])
    version: Optional[str] = Field(None, examples=['1.0.0'])


class Schema5(BaseModel):
    format: Optional[str] = Field(None, examples=['int32'])
    type: Optional[str] = Field(None, examples=['integer'])


class Parameter(BaseModel):
    description: Optional[str] = Field(None, examples=['limit'])
    in_: Optional[str] = Field(None, alias='in', examples=['query'])
    name: Optional[str] = Field(None, examples=['limit'])
    required: Optional[bool] = Field(None, examples=[False])
    schema_: Optional[Schema5] = Field(None, alias='schema')


class Code(BaseModel):
    format: Optional[str] = Field(None, examples=['int32'])
    type: Optional[str] = Field(None, examples=['integer'])


class Message(BaseModel):
    type: Optional[str] = Field(None, examples=['string'])


class Properties(BaseModel):
    code: Optional[Code] = None
    message: Optional[Message] = None


class Schema6(BaseModel):
    properties: Optional[Properties] = None
    required: Optional[List[str]] = None


class ApplicationJson(BaseModel):
    schema_: Optional[Schema6] = Field(None, alias='schema')


class Content(BaseModel):
    application_json: Optional[ApplicationJson] = Field(None, alias='application/json')


class Default(BaseModel):
    content: Optional[Content] = None
    description: Optional[str] = Field(None, examples=['unexpected error'])


class Responses(BaseModel):
    default: Optional[Default] = None


class Get(BaseModel):
    operationId: Optional[str] = Field(None, examples=['listPets'])
    parameters: Optional[List[Parameter]] = None
    responses: Optional[Responses] = None
    summary: Optional[str] = Field(None, examples=['List all pets'])


class FieldPets(BaseModel):
    get: Optional[Get] = None


class Paths(BaseModel):
    field_pets: Optional[FieldPets] = Field(None, alias='/pets')


class Server(BaseModel):
    url: Optional[str] = Field(None, examples=['http://petstore.swagger.io/v1'])


class Input(BaseModel):
    info: Optional[Info3] = None
    openapi: Optional[str] = Field(None, examples=['3.0.0'])
    paths: Optional[Paths] = None
    servers: Optional[List[Server]] = None


class ImportOpenapiPostRequest(BaseModel):
    input: Optional[Input] = None
    type: Optional[str] = Field(None, examples=['json'])


class ImportOpenapiPostResponse(BaseModel):
    collections: Optional[List[Collection8]] = None


class Error10(BaseModel):
    details: Optional[Details2] = None
    message: Optional[str] = Field(
        None,
        examples=[
            'The request body is missing a value for the type parameter. Check your request and try again.'
        ],
    )
    name: Optional[str] = Field(None, examples=['paramMissingError'])


class ImportOpenapiPostResponse1(BaseModel):
    error: Optional[Error10] = None


class Operation(BaseModel):
    limit: Optional[float] = Field(None, examples=[1000000])
    name: Optional[str] = Field(None, examples=['mock_usage'])
    overage: Optional[float] = Field(None, examples=[0])
    usage: Optional[float] = Field(None, examples=[2382])


class User(BaseModel):
    avatar: Optional[str] = Field(
        None,
        examples=['https://www.gravatar.com/avatar/e1f3994f2632af3d1c8c2dcc168a10e6'],
    )
    email: Optional[str] = Field(None, examples=['janedoe@example.com'])
    fullName: Optional[str] = Field(None, examples=['Jane Doe'])
    id: Optional[str] = Field(None, examples=['631643'])
    isPublic: Optional[bool] = Field(None, examples=[False])
    username: Optional[str] = Field(None, examples=['janedoe'])


class MeGetResponse(BaseModel):
    operations: Optional[List[Operation]] = None
    user: Optional[User] = None


class Mock1(BaseModel):
    collection: Optional[str] = Field(
        None, examples=['1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc']
    )
    environment: Optional[str] = Field(
        None, examples=['1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524']
    )
    id: Optional[str] = Field(None, examples=['0fca2246-c108-41f5-8454-cc032def329f'])
    mockUrl: Optional[str] = Field(
        None, examples=['https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io']
    )
    owner: Optional[str] = Field(None, examples=['1679925'])
    uid: Optional[str] = Field(
        None, examples=['1679925-0fca2246-c108-41f5-8454-cc032def329f']
    )


class MocksGetResponse(BaseModel):
    mocks: Optional[List[Mock1]] = None


class Mock2(BaseModel):
    collection: Optional[str] = Field(
        None, examples=['1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc']
    )
    environment: Optional[str] = Field(
        None, examples=['1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524']
    )


class MocksPostRequest(BaseModel):
    mock: Optional[Mock2] = None


class Mock3(BaseModel):
    collection: Optional[str] = Field(
        None, examples=['1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc']
    )
    environment: Optional[str] = Field(
        None, examples=['1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524']
    )
    id: Optional[str] = Field(None, examples=['0fca2246-c108-41f5-8454-cc032def329f'])
    mockUrl: Optional[str] = Field(
        None, examples=['https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io']
    )
    owner: Optional[str] = Field(None, examples=['1679925'])
    uid: Optional[str] = Field(
        None, examples=['1679925-0fca2246-c108-41f5-8454-cc032def329f']
    )


class MocksPostResponse(BaseModel):
    mock: Optional[Mock3] = None


class Mock4(BaseModel):
    id: Optional[str] = Field(None, examples=['0fca2246-c108-41f5-8454-cc032def329f'])
    uid: Optional[str] = Field(
        None, examples=['1679925-0fca2246-c108-41f5-8454-cc032def329f']
    )


class MocksMockUidDeleteResponse(BaseModel):
    mock: Optional[Mock4] = None


class Mock5(BaseModel):
    collection: Optional[str] = Field(
        None, examples=['1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc']
    )
    environment: Optional[str] = Field(
        None, examples=['1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524']
    )
    id: Optional[str] = Field(None, examples=['0fca2246-c108-41f5-8454-cc032def329f'])
    mockUrl: Optional[str] = Field(
        None, examples=['https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io']
    )
    owner: Optional[str] = Field(None, examples=['1679925'])
    uid: Optional[str] = Field(
        None, examples=['1679925-0fca2246-c108-41f5-8454-cc032def329f']
    )


class MocksMockUidGetResponse(BaseModel):
    mock: Optional[Mock5] = None


class Mock6(BaseModel):
    description: Optional[str] = Field(
        None, examples=['example describing update mock description']
    )
    environment: Optional[str] = Field(
        None, examples=['11582779-ac1b6608-deb7-4c05-9d48-ee775aabfc19']
    )
    name: Optional[str] = Field(None, examples=['My Mock Server'])
    private: Optional[bool] = Field(None, examples=[False])
    versionTag: Optional[str] = Field(
        None, examples=['abf07d3d-f8ec-47d4-8015-9fe83078b4ec']
    )


class MocksMockUidPutRequest(BaseModel):
    mock: Optional[Mock6] = None


class Config(BaseModel):
    headers: Optional[List] = None
    matchBody: Optional[bool] = Field(None, examples=[False])
    matchQueryParams: Optional[bool] = Field(None, examples=[True])
    matchWildcards: Optional[bool] = Field(None, examples=[True])


class Mock7(BaseModel):
    collection: Optional[str] = Field(
        None, examples=['11582779-fd6797e2-de6b-4699-975c-85290e4c2499']
    )
    config: Optional[Config] = None
    environment: Optional[str] = Field(
        None, examples=['11582779-ac1b6608-deb7-4c05-9d48-ee775aabfc19']
    )
    id: Optional[str] = Field(None, examples=['06040138-dd6b-4cce-9a02-7e1c1ab59723'])
    mockUrl: Optional[str] = Field(
        None, examples=['https://06040138-dd6b-4cce-9a02-7e1c1ab59723.mock.pstmn.io']
    )
    name: Optional[str] = Field(None, examples=['My Mock Server'])
    owner: Optional[str] = Field(None, examples=['11582779'])
    uid: Optional[str] = Field(
        None, examples=['11582779-06040138-dd6b-4cce-9a02-7e1c1ab59723']
    )


class MocksMockUidPutResponse(BaseModel):
    mock: Optional[Mock7] = None


class Mock8(BaseModel):
    id: Optional[str] = Field(None, examples=['06040138-dd6b-4cce-9a02-7e1c1ab59723'])


class MocksMockUidPublishPostResponse(BaseModel):
    mock: Optional[Mock8] = None


class MocksMockUidUnpublishDeleteResponse(BaseModel):
    mock: Optional[Mock8] = None


class Monitor(BaseModel):
    id: Optional[str] = Field(None, examples=['1e6b6c77-2031-42d0-9948-76d7251b2dd1'])
    name: Optional[str] = Field(None, examples=['Batman & Sherlock Holmes Monitor'])
    owner: Optional[str] = Field(None, examples=['5852'])
    uid: Optional[str] = Field(
        None, examples=['5852-1e6b6c77-2031-42d0-9948-76d7251b2dd1']
    )


class MonitorsGetResponse(BaseModel):
    monitors: Optional[List[Monitor]] = None


class Schedule(BaseModel):
    cron: Optional[str] = Field(None, examples=['0 0 * * *'])
    timezone: Optional[str] = Field(None, examples=['Asia/Kolkata'])


class Monitor1(BaseModel):
    collection: Optional[str] = Field(
        None, examples=['5852-8d05dd85-222c-1452-553b-e76a531b71ed']
    )
    environment: Optional[str] = Field(
        None, examples=['5852-8a4c21ea-2a36-40d1-a82d-d717fac9d6ef']
    )
    name: Optional[str] = Field(None, examples=['This is a Monitor Name'])
    schedule: Optional[Schedule] = None


class MonitorsPostRequest(BaseModel):
    monitor: Optional[Monitor1] = None


class Monitor2(BaseModel):
    id: Optional[str] = Field(None, examples=['1e6b6dfd-7ba4-4590-9ee1-5948102d7797'])
    name: Optional[str] = Field(None, examples=['Monitor Name'])
    uid: Optional[str] = Field(
        None, examples=['5852-1e6b6dfd-7ba4-4590-9ee1-5948102d7797']
    )


class MonitorsPostResponse(BaseModel):
    monitor: Optional[Monitor2] = None


class Details4(BaseModel):
    param: Optional[str] = Field(None, examples=['monitor'])


class Error11(BaseModel):
    details: Optional[Details4] = None
    message: Optional[str] = Field(
        None, examples=['Parameter is missing in the request.']
    )
    name: Optional[str] = Field(None, examples=['paramMissingError'])


class MonitorsPostResponse1(BaseModel):
    error: Optional[Error11] = None


class Monitor3(BaseModel):
    id: Optional[str] = Field(None, examples=['1e6b8957-35f9-42a0-8d2f-f03d7085b3d2'])
    uid: Optional[str] = Field(
        None, examples=['5852-1e6b8957-35f9-42a0-8d2f-f03d7085b3d2']
    )


class MonitorsMonitorUidDeleteResponse(BaseModel):
    monitor: Optional[Monitor3] = None


class Error12(BaseModel):
    message: Optional[str] = Field(
        None, examples=['The specified monitor does not exist.']
    )
    name: Optional[str] = Field(None, examples=['instanceNotFoundError'])


class MonitorsMonitorUidDeleteResponse1(BaseModel):
    error: Optional[Error12] = None


class Assertions(BaseModel):
    failed: Optional[float] = Field(None, examples=[1])
    total: Optional[float] = Field(None, examples=[8])


class Requests(BaseModel):
    total: Optional[float] = Field(None, examples=[4])


class Stats(BaseModel):
    assertions: Optional[Assertions] = None
    requests: Optional[Requests] = None


class LastRun(BaseModel):
    finishedAt: Optional[str] = Field(None, examples=['2020-03-25T15:45:31.340Z'])
    startedAt: Optional[str] = Field(None, examples=['2020-03-25T15:45:29.218Z'])
    stats: Optional[Stats] = None
    status: Optional[str] = Field(None, examples=['failed'])


class OnErrorItem(BaseModel):
    email: Optional[str] = Field(None, examples=['john.appleseed@example.com'])


class OnFailureItem(BaseModel):
    email: Optional[str] = Field(None, examples=['john.appleseed@example.com'])


class Notifications(BaseModel):
    onError: Optional[List[OnErrorItem]] = None
    onFailure: Optional[List[OnFailureItem]] = None


class Options(BaseModel):
    followRedirects: Optional[bool] = Field(None, examples=[True])
    requestDelay: Optional[float] = Field(None, examples=[0])
    requestTimeout: Optional[float] = Field(None, examples=[3000])
    strictSSL: Optional[bool] = Field(None, examples=[True])


class Schedule1(BaseModel):
    cron: Optional[str] = Field(None, examples=['0 0 * * * *'])
    nextRun: Optional[str] = Field(None, examples=['2016-11-30T09:30:00.000Z'])
    timezone: Optional[str] = Field(None, examples=['Asia/Calcutta'])


class Monitor4(BaseModel):
    collectionUid: Optional[str] = Field(
        None, examples=['5852-8d05dd85-222c-1452-553b-e76a531b71ed']
    )
    distribution: Optional[List] = None
    environmentUid: Optional[str] = Field(
        None, examples=['5851-8d05dd85-222c-1452-553b-e76a531b71ed']
    )
    id: Optional[str] = Field(None, examples=['1e6b6cc1-c760-48e0-968f-4bfaeeae9af1'])
    lastRun: Optional[LastRun] = None
    name: Optional[str] = Field(None, examples=['Postman Echo Monitor'])
    notifications: Optional[Notifications] = None
    options: Optional[Options] = None
    owner: Optional[str] = Field(None, examples=['5852'])
    schedule: Optional[Schedule1] = None
    uid: Optional[str] = Field(
        None, examples=['5852-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1']
    )


class MonitorsMonitorUidGetResponse(BaseModel):
    monitor: Optional[Monitor4] = None


class MonitorsMonitorUidGetResponse1(BaseModel):
    error: Optional[Error12] = None


class Schedule2(BaseModel):
    cron: Optional[str] = Field(None, examples=['*/5 * * * *'])
    timezone: Optional[str] = Field(None, examples=['America/Chicago'])


class Monitor5(BaseModel):
    name: Optional[str] = Field(None, examples=['Updated Monitor Name'])
    schedule: Optional[Schedule2] = None


class MonitorsMonitorUidPutRequest(BaseModel):
    monitor: Optional[Monitor5] = None


class Monitor6(BaseModel):
    id: Optional[str] = Field(None, examples=['1e6b6e2a-c2ad-4090-b750-0df4e6624352'])
    name: Optional[str] = Field(None, examples=['Updated Monitor Name'])
    uid: Optional[str] = Field(
        None, examples=['5852-1e6b6e2a-c2ad-4090-b750-0df4e6624352']
    )


class MonitorsMonitorUidPutResponse(BaseModel):
    monitor: Optional[Monitor6] = None


class Item(BaseModel):
    id: Optional[str] = Field(None, examples=['b5e8d7dd-909c-4ba7-aef4-8609bc50b586'])
    name: Optional[str] = Field(None, examples=['Sample POST Request'])


class Body3(BaseModel):
    contentLength: Optional[float] = Field(None, examples=[18])
    mode: Optional[str] = Field(None, examples=['raw'])


class Headers(BaseModel):
    accept: Optional[str] = Field(None, examples=['*/*'])
    accept_encoding: Optional[str] = Field(
        None, alias='accept-encoding', examples=['gzip, deflate']
    )
    content_length: Optional[float] = Field(None, alias='content-length', examples=[18])
    content_type: Optional[str] = Field(
        None, alias='content-type', examples=['application/json']
    )


class Request3(BaseModel):
    body: Optional[Body3] = None
    headers: Optional[Headers] = None
    method: Optional[str] = Field(None, examples=['POST'])
    timestamp: Optional[str] = Field(None, examples=['2016-12-04T14:30:26.025Z'])
    url: Optional[str] = Field(None, examples=['echo.getpostman.com/post'])


class Body4(BaseModel):
    contentLength: Optional[float] = Field(None, examples=[298])


class Headers1(BaseModel):
    connection: Optional[str] = Field(None, examples=['keep-alive'])
    content_encoding: Optional[str] = Field(
        None, alias='content-encoding', examples=['gzip']
    )
    content_type: Optional[str] = Field(
        None, alias='content-type', examples=['application/json']
    )
    date: Optional[str] = Field(None, examples=['Sun, 04 Dec 2016 14:30:26 GMT'])
    transfer_encoding: Optional[str] = Field(
        None, alias='transfer-encoding', examples=['chunked']
    )


class Response(BaseModel):
    body: Optional[Body4] = None
    code: Optional[float] = Field(None, examples=[200])
    headers: Optional[Headers1] = None
    responseSize: Optional[float] = Field(None, examples=[298])
    responseTime: Optional[float] = Field(None, examples=[26])


class Execution(BaseModel):
    id: Optional[float] = Field(None, examples=[1])
    item: Optional[Item] = None
    request: Optional[Request3] = None
    response: Optional[Response] = None


class Assertion(BaseModel):
    Status_code_is_400: Optional[bool] = Field(
        None, alias='Status code is 400', examples=[False]
    )


class Failure(BaseModel):
    assertion: Optional[Assertion] = None
    executionId: Optional[float] = Field(None, examples=[2])
    message: Optional[str] = Field(
        None, examples=["Expected 'Status code is 400' to be truthy"]
    )
    name: Optional[str] = Field(None, examples=['AssertionError'])


class Info4(BaseModel):
    collectionUid: Optional[str] = Field(
        None, examples=['5852-1d3daef4-2037-4584-ab86-bafd8c8f8a55']
    )
    finishedAt: Optional[str] = Field(None, examples=['2016-12-04T14:30:26.000Z'])
    jobId: Optional[str] = Field(
        None, examples=['1e6ba2e3-1aaf-4c10-bd5f-905943284b2a']
    )
    monitorId: Optional[str] = Field(
        None, examples=['1e6b8970-fd13-4480-b011-b3b3e3cd271d']
    )
    name: Optional[str] = Field(None, examples=['Sample Collection monitor 1 #56'])
    startedAt: Optional[str] = Field(None, examples=['2016-12-04T14:30:25.000Z'])
    status: Optional[str] = Field(None, examples=['failed'])


class Assertions1(BaseModel):
    failed: Optional[float] = Field(None, examples=[1])
    total: Optional[float] = Field(None, examples=[1])


class Requests1(BaseModel):
    failed: Optional[float] = Field(None, examples=[1])
    total: Optional[float] = Field(None, examples=[3])


class Stats1(BaseModel):
    assertions: Optional[Assertions1] = None
    requests: Optional[Requests1] = None


class Run(BaseModel):
    executions: Optional[List[Execution]] = None
    failures: Optional[List[Failure]] = None
    info: Optional[Info4] = None
    stats: Optional[Stats1] = None


class MonitorsMonitorUidRunPostResponse(BaseModel):
    run: Optional[Run] = None


class Webhook(BaseModel):
    collection: Optional[str] = Field(None, examples=['{{collection_id}}'])
    name: Optional[str] = Field(None, examples=['{{webhook_name}}'])


class WebhooksPostRequest(BaseModel):
    webhook: Optional[Webhook] = None


class Workspace(BaseModel):
    id: Optional[str] = Field(None, examples=['4e6d34c2-cfdb-4b33-8868-12a875bebda3'])
    name: Optional[str] = Field(None, examples=['My Workspace'])
    type: Optional[str] = Field(None, examples=['personal'])


class WorkspacesGetResponse(BaseModel):
    workspaces: Optional[List[Workspace]] = None


class Collection10(BaseModel):
    id: Optional[str] = Field(None, examples=['e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d'])
    name: Optional[str] = Field(None, examples=['Straw hats'])
    uid: Optional[str] = Field(
        None, examples=['8154-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d']
    )


class Environment7(BaseModel):
    id: Optional[str] = Field(None, examples=['83a1aaa2-a204-4bd8-9b92-4d486918906b'])
    name: Optional[str] = Field(None, examples=['env'])
    uid: Optional[str] = Field(
        None, examples=['8154-83a1aaa2-a204-4bd8-9b92-4d486918906b']
    )


class Mock10(BaseModel):
    id: Optional[str] = Field(None, examples=['cda672ef-1375-40e9-baee-e20ece8d7b65'])


class Monitor7(BaseModel):
    id: Optional[str] = Field(None, examples=['1e889bd2-3862-4be0-b2c2-9b1fe9673aec'])


class Workspace1(BaseModel):
    collections: Optional[List[Collection10]] = None
    description: Optional[str] = Field(None, examples=['Some description'])
    environments: Optional[List[Environment7]] = None
    mocks: Optional[List[Mock10]] = None
    monitors: Optional[List[Monitor7]] = None
    name: Optional[str] = Field(None, examples=['New Workspace'])
    type: Optional[str] = Field(None, examples=['personal'])


class WorkspacesPostRequest(BaseModel):
    workspace: Optional[Workspace1] = None


class Workspace2(BaseModel):
    id: Optional[str] = Field(None, examples=['cfbcd9bf-cc8b-4d6f-b8ef-440a3e49e29f'])
    name: Optional[str] = Field(None, examples=['New Workspace'])


class WorkspacesPostResponse(BaseModel):
    workspace: Optional[Workspace2] = None


class Error14(BaseModel):
    message: Optional[str] = Field(
        None, examples=['Instance not found in the database.']
    )
    name: Optional[str] = Field(None, examples=['instanceNotFoundError'])


class WorkspacesPostResponse1(BaseModel):
    error: Optional[Error14] = None


class Workspace3(BaseModel):
    id: Optional[str] = Field(None, examples=['{{workspace_id}}'])


class WorkspacesWorkspaceIdDeleteResponse(BaseModel):
    workspace: Optional[Workspace3] = None


class Collection11(BaseModel):
    id: Optional[str] = Field(None, examples=['7c31b469-bd43-4411-9283-6d397855ee0e'])
    name: Optional[str] = Field(None, examples=['Mock demo - collection'])
    uid: Optional[str] = Field(
        None, examples=['1234-7c31b469-bd43-4411-9283-6d397855ee0e']
    )


class Environment8(BaseModel):
    id: Optional[str] = Field(None, examples=['423fd955-a9c8-47cd-9ab0-09a6a575c4be'])
    name: Optional[str] = Field(None, examples=['Mock demo - CNX'])
    uid: Optional[str] = Field(
        None, examples=['1234-423fd955-a9c8-47cd-9ab0-09a6a575c4be']
    )


class Workspace4(BaseModel):
    collections: Optional[List[Collection11]] = None
    description: Optional[str] = Field(None, examples=['Demos.'])
    environments: Optional[List[Environment8]] = None
    id: Optional[str] = Field(None, examples=['f8801e9e-03a4-4c7b-b31e-5db5cd771696'])
    name: Optional[str] = Field(None, examples=['Demo workspace'])
    type: Optional[str] = Field(None, examples=['personal'])


class WorkspacesWorkspaceIdGetResponse(BaseModel):
    workspace: Optional[Workspace4] = None


class WorkspacesWorkspaceIdGetResponse1(BaseModel):
    error: Optional[Error14] = None


class Collection12(BaseModel):
    id: Optional[str] = Field(None, examples=['e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d'])
    name: Optional[str] = Field(None, examples=['Straw hats'])
    uid: Optional[str] = Field(
        None, examples=['8154-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d']
    )


class Environment9(BaseModel):
    id: Optional[str] = Field(None, examples=['83a1aaa2-a204-4bd8-9b92-4d486918906b'])
    name: Optional[str] = Field(None, examples=['env'])
    uid: Optional[str] = Field(
        None, examples=['8154-83a1aaa2-a204-4bd8-9b92-4d486918906b']
    )


class Workspace5(BaseModel):
    collections: Optional[List[Collection12]] = None
    description: Optional[str] = Field(None, examples=['Some description'])
    environments: Optional[List[Environment9]] = None
    mocks: Optional[List[Mock10]] = None
    monitors: Optional[List[Monitor7]] = None
    name: Optional[str] = Field(None, examples=['New Workspace updated'])


class WorkspacesWorkspaceIdPutRequest(BaseModel):
    workspace: Optional[Workspace5] = None


class Workspace6(BaseModel):
    id: Optional[str] = Field(None, examples=['cfbcd9bf-cc8b-4d6f-b8ef-440a3e49e29f'])
    name: Optional[str] = Field(None, examples=['New Workspace'])


class WorkspacesWorkspaceIdPutResponse(BaseModel):
    workspace: Optional[Workspace6] = None


class Error16(BaseModel):
    message: Optional[str] = Field(
        None, examples=['You do not have access to update this workspace.']
    )
    name: Optional[str] = Field(None, examples=['forbiddenError'])


class WorkspacesWorkspaceIdPutResponse1(BaseModel):
    error: Optional[Error16] = None


class Error17(BaseModel):
    message: Optional[str] = Field(
        None, examples=['The specified workspace does not exist.']
    )
    name: Optional[str] = Field(None, examples=['instanceNotFoundError'])


class WorkspacesWorkspaceIdPutResponse2(BaseModel):
    error: Optional[Error17] = None
